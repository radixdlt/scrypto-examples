name: CI

on:
  push:
    branches:
      - develop
      - main
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  check-code-format:
    name: Check code format
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: Install Scrypto toolchain
      run: cargo install --git https://github.com/radixdlt/radixdlt-scrypto --rev c948bba0565746ac324fc4b004149da6149b5a96 --bins simulator
    - name: Check format
      run: bash ./check.sh
  # run-tests:
  #   name: Run tests
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest]
  #   steps:
  #   - uses: actions/checkout@v2
  #   - uses: actions-rs/toolchain@v1
  #     with:
  #       toolchain: stable
  #   - name: Add wasm target
  #     run: rustup target add wasm32-unknown-unknown
  #   - name: Add wasm target (nightly)
  #     run: rustup +nightly target add wasm32-unknown-unknown
  #   - name: Install Scrypto toolchain
  #     run: cargo install --git https://github.com/radixdlt/radixdlt-scrypto --rev c948bba0565746ac324fc4b004149da6149b5a96 --bins simulator
  #   - name: Run tests
  #     run: ./test.sh
  # run-defi-demo:
  #   name: Run DeFi demo
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest]
  #   steps:
  #   - uses: actions/checkout@v2
  #   - uses: actions-rs/toolchain@v1
  #     with:
  #       toolchain: stable
  #   - name: Add wasm target
  #     run: rustup target add wasm32-unknown-unknown
  #   - name: Add wasm target (nightly)
  #     run: rustup +nightly target add wasm32-unknown-unknown
  #   - name: Install Scrypto toolchain
  #     run: cargo install --git https://github.com/radixdlt/radixdlt-scrypto --rev c948bba0565746ac324fc4b004149da6149b5a96 --bins simulator
  #   - name: Run tests
  #     run: ./defi/demo.sh

  setup-tags:
     runs-on: ubuntu-latest
     name: Set tags
     steps:
       - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
         with:
           fetch-depth: 0
       - name: Docker tags for gumball-internal website
         id: gumball-internal-website-tags
         uses: docker/metadata-action@v4
         with:
           images: |
             eu.gcr.io/dev-container-repo/gumball-internal-website
           tags: |
             type=sha,event=pr
             type=sha,event=branch
             type=semver,pattern={{version}}

     outputs:
       gumball-internal-website-tags: ${{ steps.gumball-internal-website-tags.outputs.tags }}
       gumball-internal-website-labels: ${{ steps.gumball-internal-website-tags.outputs.labels }}
       gumball-internal-website-json: ${{ steps.gumball-internal-website-tags.outputs.json }}

  push-website:
    uses: radixdlt/public-iac-resuable-artifacts/.github/workflows/docker-build.yml@main
    needs:
      - setup-tags
    with:
      runs_on: ubuntu-latest
      # image information
      image_registry: "eu.gcr.io"
      image_organization: "dev-container-repo"
      image_name: "gumball-internal-website"
      tags: |
        type=sha,event=branch
        type=sha,event=pr
        type=semver,pattern={{version}}
      # build information
      context: "./full-stack/dapp-toolkit-gumball-machine"
      dockerfile: "./full-stack/dapp-toolkit-gumball-machine/Dockerfile"
      platforms: "linux/amd64"
      target: prod
    secrets:
      workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDP }}
      service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      
  deploy-gumball-internal:
    runs-on: ubuntu-22.04
    if:  github.ref == 'refs/heads/main'
    needs:
      - setup-tags
      - push-website
    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b
      - name: Trigger deployment event ${{ github.ref }}
        env:
          EVENT_TYPE: "gumball_internal"
        run: |
          curl --silent --show-error --fail --location --request POST 'https://github-worker.radixdlt.com/repos/radixdlt/${{secrets.DISPATCH_REPO}}/dispatches' \
            --header 'Accept: application/vnd.github.v3+json' \
            --header 'Authorization: Basic ${{secrets.CF_GITHUB_WORKER_ENCODED_BASIC_AUTH}}' \
            --header 'Content-Type: application/json' \
            --data-raw '{
                "event_type": "${{env.EVENT_TYPE}}",
                "client_payload": {
                "image_tag": "${{ fromJSON(needs.setup-tags.outputs.gumball-internal-website-json).labels['org.opencontainers.image.version'] }}"
                }
            }'